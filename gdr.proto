syntax = "proto3";

import "google/protobuf/timestamp.proto";

//GDRs is the message type wich is published to the mqtt Handler for GDR
// config_uuid - unique identification of config at time of measurement (same as associated GCR)
message GDRs {
	map<string,GDR> GDRs = 1;
	string config_uuid = 2;
}

//GCRs is the message type wich is published to the mqtt Handler for GCR
// config_uuid - unique identification of config in time (i.e. changes on config change)
message GCRs {
	map<string,GCR> GCRs = 1;
	string config_uuid = 2;
}

//GDR = Generic Data Record
// id - unique identification (Same to associated GCR)
// status - see Status declaration
// timestamp - last time Data was updated
// values - Key = Binary ObisCode, Value = Value of ObisCode 
//        - based on ObisCode the basic Data information
//        - in groups here is the comparison of the childs data information
message GDR {
	string id = 1;
	Status status = 2;
	google.protobuf.Timestamp timestamp = 3;
	map<uint64,uint64> values = 4;
}

//GCR = Generic Config Record
// id - unique identification (Same to associated GDR)
// label - describes the Datasource
// class - see Class declaration
// sources - points to the childs of the measuring point
// 	       - references on the GDR ids
//         - structure of groupings
// codes  - based on Binary ObisCodes
//        - declares which ObisCodes the associated GDR has
// devicetype - see DeviceType declaration 
// meta - may include app-dependent meta information
// timestamp - last time the config was updated
message GCR {
	string id = 1;
	string label = 2;
	Class class = 3;
	repeated string sources = 4;
	repeated uint64 codes = 5;
	DeviceType devicetype = 6;
	map<string,string> meta = 7;
	google.protobuf.Timestamp timestamp = 8;
}

// devicetype - declares which Type of Device the Data Source is 
//    		  - necessary for Sankey-Diagram 
enum DeviceType {
	DEVICE_TYPE_UNKNOWN = 0;
	DEVICE_TYPE_PHOTOVOLTAIC_SYSTEM = 1;
	DEVICE_TYPE_ELECTRIC_VEHICLE = 2;
	DEVICE_TYPE_BATTERY = 3;
	DEVICE_TYPE_OVEN = 4;
	DEVICE_TYPE_FLOW_HEATER = 5;
	DEVICE_TYPE_BOILER = 6;
	DEVICE_TYPE_IMMERSION_HEATER = 7;
	DEVICE_TYPE_STOVE = 8;
	DEVICE_TYPE_COOLER = 9;
	DEVICE_TYPE_VENTILATION = 10;
	DEVICE_TYPE_DISHWASHER = 11;
	DEVICE_TYPE_DRYER = 12;
	DEVICE_TYPE_HEAT_PUMP = 13;
	DEVICE_TYPE_WASHING_MACHINE = 14;
	DEVICE_TYPE_INVERTER_ONEPHASE = 15;
	DEVICE_TYPE_INVERTER_THREEPHASE = 16;
	DEVICE_TYPE_CHP = 17; // Combined heat and power
	DEVICE_TYPE_BUILDING_OFFICE = 18;
	DEVICE_TYPE_BUILDING_COMMERCIAL = 19;
	DEVICE_TYPE_BUILDING_FACTORY = 20;
	DEVICE_TYPE_BUILDING_SINGLE_HOME = 21;
	DEVICE_TYPE_BUILDING_HOTEL = 22;
	DEVICE_TYPE_BUILDING_APARTMENTS = 23;
	DEVICE_TYPE_BUILDING_PARKING = 24;
	DEVICE_TYPE_BUILDING_RESIDENTIAL = 25;
	DEVICE_TYPE_ROOM_BATH = 26;
	DEVICE_TYPE_ROOM_GARAGE = 27;
	DEVICE_TYPE_ROOM_BASEMENT = 28;
	DEVICE_TYPE_ROOM_CHILD = 29;
	DEVICE_TYPE_ROOM_KITCHEN = 30;
	DEVICE_TYPE_ROOM_SAUNA = 31;
	DEVICE_TYPE_ROOM_BED = 32;
	DEVICE_TYPE_ROOM_LIVING = 33;
	DEVICE_TYPE_ROOM_GENERIC = 34;
	DEVICE_TYPE_CONTROLLABLE_LOAD = 35;
	//To be continued 
}

// Status OK = Datasource updated Data, GDR Updated
// Status WARNING = Datasource updated Data but configuration is needed
// Status Error = Datasource did not updated Data (Maybe broken)
enum Status {
	STATUS_UNKNOWN = 0;
	STATUS_OK = 1;
	STATUS_WARNING = 2;
	STATUS_ERROR = 3;
}

// Class Consumer = Consumes Energy, Power, ...
// Class Producer = Produces Energy, Power, ...
// Class Hybrid = Consumes or Produces Energy, Power, ... 
enum Class {
	CLASS_UNKNOWN = 0;
	CLASS_CONSUMER = 1;
	CLASS_PRODUCER = 2;
	CLASS_HYBRID = 3;
}
