// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gdr.proto

package gdr

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// devicetype - declares which Type of Device the Data Source is
//    		  - necessary for Sankey-Diagram
type DeviceType int32

const (
	DeviceType_DEVICE_TYPE_UNKNOWN              DeviceType = 0
	DeviceType_DEVICE_TYPE_PHOTOVOLTAIC_SYSTEM  DeviceType = 1
	DeviceType_DEVICE_TYPE_ELECTRIC_VEHICLE     DeviceType = 2
	DeviceType_DEVICE_TYPE_BATTERY              DeviceType = 3
	DeviceType_DEVICE_TYPE_OVEN                 DeviceType = 4
	DeviceType_DEVICE_TYPE_FLOW_HEATER          DeviceType = 5
	DeviceType_DEVICE_TYPE_BOILER               DeviceType = 6
	DeviceType_DEVICE_TYPE_IMMERSION_HEATER     DeviceType = 7
	DeviceType_DEVICE_TYPE_STOVE                DeviceType = 8
	DeviceType_DEVICE_TYPE_COOLER               DeviceType = 9
	DeviceType_DEVICE_TYPE_VENTILATION          DeviceType = 10
	DeviceType_DEVICE_TYPE_DISHWASHER           DeviceType = 11
	DeviceType_DEVICE_TYPE_DRYER                DeviceType = 12
	DeviceType_DEVICE_TYPE_HEAT_PUMP            DeviceType = 13
	DeviceType_DEVICE_TYPE_WASHING_MACHINE      DeviceType = 14
	DeviceType_DEVICE_TYPE_INVERTER_ONEPHASE    DeviceType = 15
	DeviceType_DEVICE_TYPE_INVERTER_THREEPHASE  DeviceType = 16
	DeviceType_DEVICE_TYPE_CHP                  DeviceType = 17
	DeviceType_DEVICE_TYPE_BUILDING_OFFICE      DeviceType = 18
	DeviceType_DEVICE_TYPE_BUILDING_COMMERCIAL  DeviceType = 19
	DeviceType_DEVICE_TYPE_BUILDING_FACTORY     DeviceType = 20
	DeviceType_DEVICE_TYPE_BUILDING_SINGLE_HOME DeviceType = 21
	DeviceType_DEVICE_TYPE_BUILDING_HOTEL       DeviceType = 22
	DeviceType_DEVICE_TYPE_BUILDING_APARTMENTS  DeviceType = 23
	DeviceType_DEVICE_TYPE_BUILDING_PARKING     DeviceType = 24
	DeviceType_DEVICE_TYPE_BUILDING_RESIDENTIAL DeviceType = 25
	DeviceType_DEVICE_TYPE_ROOM_BATH            DeviceType = 26
	DeviceType_DEVICE_TYPE_ROOM_GARAGE          DeviceType = 27
	DeviceType_DEVICE_TYPE_ROOM_BASEMENT        DeviceType = 28
	DeviceType_DEVICE_TYPE_ROOM_CHILD           DeviceType = 29
	DeviceType_DEVICE_TYPE_ROOM_KITCHEN         DeviceType = 30
	DeviceType_DEVICE_TYPE_ROOM_SAUNA           DeviceType = 31
	DeviceType_DEVICE_TYPE_ROOM_BED             DeviceType = 32
	DeviceType_DEVICE_TYPE_ROOM_LIVING          DeviceType = 33
	DeviceType_DEVICE_TYPE_ROOM_GENERIC         DeviceType = 34
	DeviceType_DEVICE_TYPE_CONTROLLABLE_LOAD    DeviceType = 35
)

var DeviceType_name = map[int32]string{
	0:  "DEVICE_TYPE_UNKNOWN",
	1:  "DEVICE_TYPE_PHOTOVOLTAIC_SYSTEM",
	2:  "DEVICE_TYPE_ELECTRIC_VEHICLE",
	3:  "DEVICE_TYPE_BATTERY",
	4:  "DEVICE_TYPE_OVEN",
	5:  "DEVICE_TYPE_FLOW_HEATER",
	6:  "DEVICE_TYPE_BOILER",
	7:  "DEVICE_TYPE_IMMERSION_HEATER",
	8:  "DEVICE_TYPE_STOVE",
	9:  "DEVICE_TYPE_COOLER",
	10: "DEVICE_TYPE_VENTILATION",
	11: "DEVICE_TYPE_DISHWASHER",
	12: "DEVICE_TYPE_DRYER",
	13: "DEVICE_TYPE_HEAT_PUMP",
	14: "DEVICE_TYPE_WASHING_MACHINE",
	15: "DEVICE_TYPE_INVERTER_ONEPHASE",
	16: "DEVICE_TYPE_INVERTER_THREEPHASE",
	17: "DEVICE_TYPE_CHP",
	18: "DEVICE_TYPE_BUILDING_OFFICE",
	19: "DEVICE_TYPE_BUILDING_COMMERCIAL",
	20: "DEVICE_TYPE_BUILDING_FACTORY",
	21: "DEVICE_TYPE_BUILDING_SINGLE_HOME",
	22: "DEVICE_TYPE_BUILDING_HOTEL",
	23: "DEVICE_TYPE_BUILDING_APARTMENTS",
	24: "DEVICE_TYPE_BUILDING_PARKING",
	25: "DEVICE_TYPE_BUILDING_RESIDENTIAL",
	26: "DEVICE_TYPE_ROOM_BATH",
	27: "DEVICE_TYPE_ROOM_GARAGE",
	28: "DEVICE_TYPE_ROOM_BASEMENT",
	29: "DEVICE_TYPE_ROOM_CHILD",
	30: "DEVICE_TYPE_ROOM_KITCHEN",
	31: "DEVICE_TYPE_ROOM_SAUNA",
	32: "DEVICE_TYPE_ROOM_BED",
	33: "DEVICE_TYPE_ROOM_LIVING",
	34: "DEVICE_TYPE_ROOM_GENERIC",
	35: "DEVICE_TYPE_CONTROLLABLE_LOAD",
}

var DeviceType_value = map[string]int32{
	"DEVICE_TYPE_UNKNOWN":              0,
	"DEVICE_TYPE_PHOTOVOLTAIC_SYSTEM":  1,
	"DEVICE_TYPE_ELECTRIC_VEHICLE":     2,
	"DEVICE_TYPE_BATTERY":              3,
	"DEVICE_TYPE_OVEN":                 4,
	"DEVICE_TYPE_FLOW_HEATER":          5,
	"DEVICE_TYPE_BOILER":               6,
	"DEVICE_TYPE_IMMERSION_HEATER":     7,
	"DEVICE_TYPE_STOVE":                8,
	"DEVICE_TYPE_COOLER":               9,
	"DEVICE_TYPE_VENTILATION":          10,
	"DEVICE_TYPE_DISHWASHER":           11,
	"DEVICE_TYPE_DRYER":                12,
	"DEVICE_TYPE_HEAT_PUMP":            13,
	"DEVICE_TYPE_WASHING_MACHINE":      14,
	"DEVICE_TYPE_INVERTER_ONEPHASE":    15,
	"DEVICE_TYPE_INVERTER_THREEPHASE":  16,
	"DEVICE_TYPE_CHP":                  17,
	"DEVICE_TYPE_BUILDING_OFFICE":      18,
	"DEVICE_TYPE_BUILDING_COMMERCIAL":  19,
	"DEVICE_TYPE_BUILDING_FACTORY":     20,
	"DEVICE_TYPE_BUILDING_SINGLE_HOME": 21,
	"DEVICE_TYPE_BUILDING_HOTEL":       22,
	"DEVICE_TYPE_BUILDING_APARTMENTS":  23,
	"DEVICE_TYPE_BUILDING_PARKING":     24,
	"DEVICE_TYPE_BUILDING_RESIDENTIAL": 25,
	"DEVICE_TYPE_ROOM_BATH":            26,
	"DEVICE_TYPE_ROOM_GARAGE":          27,
	"DEVICE_TYPE_ROOM_BASEMENT":        28,
	"DEVICE_TYPE_ROOM_CHILD":           29,
	"DEVICE_TYPE_ROOM_KITCHEN":         30,
	"DEVICE_TYPE_ROOM_SAUNA":           31,
	"DEVICE_TYPE_ROOM_BED":             32,
	"DEVICE_TYPE_ROOM_LIVING":          33,
	"DEVICE_TYPE_ROOM_GENERIC":         34,
	"DEVICE_TYPE_CONTROLLABLE_LOAD":    35,
}

func (x DeviceType) String() string {
	return proto.EnumName(DeviceType_name, int32(x))
}

func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f88fa3b9b3f72b96, []int{0}
}

// Status OK = Datasource updated Data, GDR Updated
// Status WARNING = Datasource updated Data but configuration is needed
// Status Error = Datasource did not updated Data (Maybe broken)
type Status int32

const (
	Status_STATUS_UNKNOWN Status = 0
	Status_STATUS_OK      Status = 1
	Status_STATUS_WARNING Status = 2
	Status_STATUS_ERROR   Status = 3
)

var Status_name = map[int32]string{
	0: "STATUS_UNKNOWN",
	1: "STATUS_OK",
	2: "STATUS_WARNING",
	3: "STATUS_ERROR",
}

var Status_value = map[string]int32{
	"STATUS_UNKNOWN": 0,
	"STATUS_OK":      1,
	"STATUS_WARNING": 2,
	"STATUS_ERROR":   3,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f88fa3b9b3f72b96, []int{1}
}

// Class Consumer = Consumes Energy, Power, ...
// Class Producer = Produces Energy, Power, ...
// Class Hybrid = Consumes or Produces Energy, Power, ...
type Class int32

const (
	Class_CLASS_UNKNOWN  Class = 0
	Class_CLASS_CONSUMER Class = 1
	Class_CLASS_PRODUCER Class = 2
	Class_CLASS_HYBRID   Class = 3
)

var Class_name = map[int32]string{
	0: "CLASS_UNKNOWN",
	1: "CLASS_CONSUMER",
	2: "CLASS_PRODUCER",
	3: "CLASS_HYBRID",
}

var Class_value = map[string]int32{
	"CLASS_UNKNOWN":  0,
	"CLASS_CONSUMER": 1,
	"CLASS_PRODUCER": 2,
	"CLASS_HYBRID":   3,
}

func (x Class) String() string {
	return proto.EnumName(Class_name, int32(x))
}

func (Class) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f88fa3b9b3f72b96, []int{2}
}

//GDRs is the message type wich is published to the mqtt Handler for GDR
type GDRs struct {
	GDRs                 map[string]*GDR `protobuf:"bytes,1,rep,name=GDRs,json=gDRs,proto3" json:"GDRs" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ConfigUuid           string          `protobuf:"bytes,2,opt,name=config_uuid,json=configUuid,proto3" json:"config_uuid"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GDRs) Reset()         { *m = GDRs{} }
func (m *GDRs) String() string { return proto.CompactTextString(m) }
func (*GDRs) ProtoMessage()    {}
func (*GDRs) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88fa3b9b3f72b96, []int{0}
}

func (m *GDRs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GDRs.Unmarshal(m, b)
}
func (m *GDRs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GDRs.Marshal(b, m, deterministic)
}
func (m *GDRs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GDRs.Merge(m, src)
}
func (m *GDRs) XXX_Size() int {
	return xxx_messageInfo_GDRs.Size(m)
}
func (m *GDRs) XXX_DiscardUnknown() {
	xxx_messageInfo_GDRs.DiscardUnknown(m)
}

var xxx_messageInfo_GDRs proto.InternalMessageInfo

func (m *GDRs) GetGDRs() map[string]*GDR {
	if m != nil {
		return m.GDRs
	}
	return nil
}

func (m *GDRs) GetConfigUuid() string {
	if m != nil {
		return m.ConfigUuid
	}
	return ""
}

//GCRs is the message type wich is published to the mqtt Handler for GCR
type GCRs struct {
	GCRs                 map[string]*GCR `protobuf:"bytes,1,rep,name=GCRs,json=gCRs,proto3" json:"GCRs" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ConfigUuid           string          `protobuf:"bytes,2,opt,name=config_uuid,json=configUuid,proto3" json:"config_uuid"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GCRs) Reset()         { *m = GCRs{} }
func (m *GCRs) String() string { return proto.CompactTextString(m) }
func (*GCRs) ProtoMessage()    {}
func (*GCRs) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88fa3b9b3f72b96, []int{1}
}

func (m *GCRs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GCRs.Unmarshal(m, b)
}
func (m *GCRs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GCRs.Marshal(b, m, deterministic)
}
func (m *GCRs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GCRs.Merge(m, src)
}
func (m *GCRs) XXX_Size() int {
	return xxx_messageInfo_GCRs.Size(m)
}
func (m *GCRs) XXX_DiscardUnknown() {
	xxx_messageInfo_GCRs.DiscardUnknown(m)
}

var xxx_messageInfo_GCRs proto.InternalMessageInfo

func (m *GCRs) GetGCRs() map[string]*GCR {
	if m != nil {
		return m.GCRs
	}
	return nil
}

func (m *GCRs) GetConfigUuid() string {
	if m != nil {
		return m.ConfigUuid
	}
	return ""
}

//GDR = Generic Data Record
// id - unique identification (Same to associated GCR)
// status - see Status declaration
// timestamp - last time Data was updated
// values - Key = Binary ObisCode, Value = Value of ObisCode
//        - based on ObisCode the basic Data information
//        - in groups here is the comparison of the childs data information
// config_uuid - unique identification of config at time of measurement (same as associated GCR)
type GDR struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Status               Status               `protobuf:"varint,2,opt,name=status,proto3,enum=Status" json:"status"`
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp"`
	Values               map[uint64]uint64    `protobuf:"bytes,4,rep,name=values,proto3" json:"values" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GDR) Reset()         { *m = GDR{} }
func (m *GDR) String() string { return proto.CompactTextString(m) }
func (*GDR) ProtoMessage()    {}
func (*GDR) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88fa3b9b3f72b96, []int{2}
}

func (m *GDR) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GDR.Unmarshal(m, b)
}
func (m *GDR) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GDR.Marshal(b, m, deterministic)
}
func (m *GDR) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GDR.Merge(m, src)
}
func (m *GDR) XXX_Size() int {
	return xxx_messageInfo_GDR.Size(m)
}
func (m *GDR) XXX_DiscardUnknown() {
	xxx_messageInfo_GDR.DiscardUnknown(m)
}

var xxx_messageInfo_GDR proto.InternalMessageInfo

func (m *GDR) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GDR) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_STATUS_UNKNOWN
}

func (m *GDR) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *GDR) GetValues() map[uint64]uint64 {
	if m != nil {
		return m.Values
	}
	return nil
}

//GCR = Generic Config Record
// id - unique identification (Same to associated GDR)
// label - describes the Datasource
// class - see Class declaration
// sources - points to the childs of the measuring point
// 	       - references on the GDR ids
//         - structure of groupings
// codes  - based on Binary ObisCodes
//        - declares which ObisCodes the associated GDR has
// devicetype - see DeviceType declaration
// meta - may include app-dependent meta information
// timestamp - last time the config was updated
// config_uuid - unique identification of config in time (i.e. changes on config change)
type GCR struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Label                string               `protobuf:"bytes,2,opt,name=label,proto3" json:"label"`
	Class                Class                `protobuf:"varint,3,opt,name=class,proto3,enum=Class" json:"class"`
	Sources              []string             `protobuf:"bytes,4,rep,name=sources,proto3" json:"sources"`
	Codes                []uint64             `protobuf:"varint,5,rep,packed,name=codes,proto3" json:"codes"`
	Devicetype           DeviceType           `protobuf:"varint,6,opt,name=devicetype,proto3,enum=DeviceType" json:"devicetype"`
	Meta                 map[string]string    `protobuf:"bytes,7,rep,name=meta,proto3" json:"meta" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,8,opt,name=timestamp,proto3" json:"timestamp"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GCR) Reset()         { *m = GCR{} }
func (m *GCR) String() string { return proto.CompactTextString(m) }
func (*GCR) ProtoMessage()    {}
func (*GCR) Descriptor() ([]byte, []int) {
	return fileDescriptor_f88fa3b9b3f72b96, []int{3}
}

func (m *GCR) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GCR.Unmarshal(m, b)
}
func (m *GCR) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GCR.Marshal(b, m, deterministic)
}
func (m *GCR) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GCR.Merge(m, src)
}
func (m *GCR) XXX_Size() int {
	return xxx_messageInfo_GCR.Size(m)
}
func (m *GCR) XXX_DiscardUnknown() {
	xxx_messageInfo_GCR.DiscardUnknown(m)
}

var xxx_messageInfo_GCR proto.InternalMessageInfo

func (m *GCR) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GCR) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *GCR) GetClass() Class {
	if m != nil {
		return m.Class
	}
	return Class_CLASS_UNKNOWN
}

func (m *GCR) GetSources() []string {
	if m != nil {
		return m.Sources
	}
	return nil
}

func (m *GCR) GetCodes() []uint64 {
	if m != nil {
		return m.Codes
	}
	return nil
}

func (m *GCR) GetDevicetype() DeviceType {
	if m != nil {
		return m.Devicetype
	}
	return DeviceType_DEVICE_TYPE_UNKNOWN
}

func (m *GCR) GetMeta() map[string]string {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *GCR) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func init() {
	proto.RegisterEnum("DeviceType", DeviceType_name, DeviceType_value)
	proto.RegisterEnum("Status", Status_name, Status_value)
	proto.RegisterEnum("Class", Class_name, Class_value)
	proto.RegisterType((*GDRs)(nil), "GDRs")
	proto.RegisterMapType((map[string]*GDR)(nil), "GDRs.GDRsEntry")
	proto.RegisterType((*GCRs)(nil), "GCRs")
	proto.RegisterMapType((map[string]*GCR)(nil), "GCRs.GCRsEntry")
	proto.RegisterType((*GDR)(nil), "GDR")
	proto.RegisterMapType((map[uint64]uint64)(nil), "GDR.ValuesEntry")
	proto.RegisterType((*GCR)(nil), "GCR")
	proto.RegisterMapType((map[string]string)(nil), "GCR.MetaEntry")
}

func init() { proto.RegisterFile("gdr.proto", fileDescriptor_f88fa3b9b3f72b96) }

var fileDescriptor_f88fa3b9b3f72b96 = []byte{
	// 960 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcd, 0x6e, 0x22, 0x47,
	0x10, 0x0e, 0xbf, 0x5e, 0x8a, 0x35, 0x6e, 0xb7, 0xff, 0xc6, 0xd8, 0x5e, 0x58, 0x3b, 0x07, 0xcb,
	0x91, 0x58, 0xc9, 0x39, 0x64, 0x13, 0x29, 0x87, 0x76, 0x4f, 0x99, 0x69, 0x79, 0x98, 0x26, 0x3d,
	0x0d, 0x16, 0xa7, 0x11, 0x36, 0xb3, 0x16, 0x0a, 0x5e, 0x2c, 0x03, 0x2b, 0xf9, 0x19, 0xf2, 0x4c,
	0x79, 0x81, 0xdc, 0xf3, 0x3e, 0x51, 0xcf, 0x60, 0x3c, 0x8c, 0xb1, 0x94, 0xbd, 0x00, 0xf5, 0xd5,
	0x57, 0x5f, 0x7d, 0x55, 0xdd, 0x6a, 0xa0, 0x74, 0x37, 0x78, 0x6c, 0x3c, 0x3c, 0x8e, 0xa7, 0xe3,
	0x6a, 0xed, 0x6e, 0x3c, 0xbe, 0x1b, 0x85, 0x9f, 0xa2, 0xe8, 0x66, 0xf6, 0xe5, 0xd3, 0x74, 0x78,
	0x1f, 0x4e, 0xa6, 0xfd, 0xfb, 0x87, 0x98, 0x70, 0xfc, 0x57, 0x06, 0xf2, 0x4d, 0x5b, 0x4d, 0xe8,
	0x49, 0xfc, 0x6d, 0x65, 0xea, 0xb9, 0xd3, 0xf2, 0xf9, 0x46, 0xc3, 0x04, 0xd1, 0x07, 0x7e, 0x9d,
	0x3e, 0x3e, 0xa9, 0xfc, 0x9d, 0x21, 0xd5, 0xa0, 0x7c, 0x3b, 0xfe, 0xfa, 0x65, 0x78, 0x17, 0xcc,
	0x66, 0xc3, 0x81, 0x95, 0xad, 0x67, 0x4e, 0x4b, 0x0a, 0x62, 0xa8, 0x33, 0x1b, 0x0e, 0xaa, 0xbf,
	0x43, 0x69, 0x51, 0x43, 0x09, 0xe4, 0xfe, 0x0c, 0x9f, 0xac, 0x4c, 0xc4, 0x32, 0x3f, 0x69, 0x15,
	0x0a, 0xdf, 0xfa, 0xa3, 0x59, 0x18, 0x55, 0x96, 0xcf, 0xf3, 0xa6, 0x81, 0x8a, 0xa1, 0xdf, 0xb2,
	0x9f, 0x33, 0xb1, 0x1b, 0x3e, 0x77, 0xc3, 0x93, 0x6e, 0xb8, 0x71, 0xc3, 0x5f, 0xdc, 0xf0, 0xff,
	0xeb, 0x86, 0x7f, 0x8f, 0x1b, 0xbe, 0xe4, 0xe6, 0xdf, 0x0c, 0xe4, 0x9a, 0xb6, 0xa2, 0x15, 0xc8,
	0x0e, 0x07, 0xf3, 0xc2, 0xec, 0x70, 0x40, 0x6b, 0x50, 0x9c, 0x4c, 0xfb, 0xd3, 0xd9, 0x24, 0x2a,
	0xac, 0x9c, 0xaf, 0x35, 0xfc, 0x28, 0x54, 0x73, 0x98, 0x7e, 0x86, 0xd2, 0x62, 0xcf, 0x56, 0x2e,
	0x12, 0xaf, 0x36, 0xe2, 0x93, 0x68, 0x3c, 0x9f, 0x44, 0x43, 0x3f, 0x33, 0xd4, 0x0b, 0x99, 0x9e,
	0x42, 0x31, 0xea, 0x3f, 0xb1, 0xf2, 0xd1, 0xe4, 0xc4, 0x6c, 0xa8, 0xd1, 0x8d, 0xa0, 0x78, 0xf4,
	0x79, 0xbe, 0xfa, 0x2b, 0x94, 0x13, 0x70, 0x72, 0xba, 0x7c, 0x3c, 0xdd, 0x76, 0x72, 0xba, 0x7c,
	0x72, 0xae, 0xbf, 0xb3, 0x90, 0x6b, 0xf2, 0xd7, 0x73, 0x6d, 0x43, 0x61, 0xd4, 0xbf, 0x09, 0x47,
	0xf3, 0x4d, 0xc6, 0x01, 0x3d, 0x84, 0xc2, 0xed, 0xa8, 0x3f, 0x99, 0x44, 0x83, 0x54, 0xce, 0x8b,
	0x0d, 0x6e, 0x22, 0x15, 0x83, 0xd4, 0x82, 0xb5, 0xc9, 0x78, 0xf6, 0x78, 0x3b, 0x77, 0x5c, 0x52,
	0xcf, 0xa1, 0x51, 0xbb, 0x1d, 0x0f, 0xc2, 0x89, 0x55, 0xa8, 0xe7, 0x4c, 0xff, 0x28, 0xa0, 0x3f,
	0x01, 0x0c, 0xc2, 0x6f, 0xc3, 0xdb, 0x70, 0xfa, 0xf4, 0x10, 0x5a, 0xc5, 0x48, 0xb2, 0xdc, 0xb0,
	0x23, 0x48, 0x3f, 0x3d, 0x84, 0x2a, 0x91, 0xa6, 0xc7, 0x90, 0xbf, 0x0f, 0xa7, 0x7d, 0x6b, 0x2d,
	0xda, 0x45, 0xc5, 0x9c, 0x4f, 0xa3, 0x15, 0x4e, 0xfb, 0xf3, 0x4b, 0x60, 0x72, 0xcb, 0xbb, 0x7e,
	0xf7, 0x1d, 0xbb, 0xae, 0xfe, 0x02, 0xa5, 0x85, 0xd8, 0x8a, 0xdb, 0xb1, 0xb4, 0xbf, 0x52, 0x62,
	0x7f, 0x67, 0xff, 0xbc, 0x03, 0x78, 0x71, 0x4c, 0xf7, 0x60, 0xcb, 0xc6, 0xae, 0xe0, 0x18, 0xe8,
	0x5e, 0x1b, 0x83, 0x8e, 0x77, 0xe5, 0xc9, 0x6b, 0x8f, 0xfc, 0x40, 0x4f, 0xa0, 0x96, 0x4c, 0xb4,
	0x1d, 0xa9, 0x65, 0x57, 0xba, 0x9a, 0x09, 0x1e, 0xf8, 0x3d, 0x5f, 0x63, 0x8b, 0x64, 0x68, 0x1d,
	0x0e, 0x93, 0x24, 0x74, 0x91, 0x6b, 0x25, 0x78, 0xd0, 0x45, 0x47, 0x70, 0x17, 0x49, 0x36, 0xad,
	0x7f, 0xc1, 0xb4, 0x46, 0xd5, 0x23, 0x39, 0xba, 0x0d, 0x24, 0x99, 0x90, 0x5d, 0xf4, 0x48, 0x9e,
	0x1e, 0xc0, 0x5e, 0x12, 0xbd, 0x74, 0xe5, 0x75, 0xe0, 0x20, 0xd3, 0xa8, 0x48, 0x81, 0xee, 0x02,
	0x5d, 0xd2, 0x92, 0xc2, 0x45, 0x45, 0x8a, 0x69, 0x17, 0xa2, 0xd5, 0x42, 0xe5, 0x0b, 0xe9, 0x3d,
	0x57, 0xae, 0xd1, 0x1d, 0xd8, 0x4c, 0x32, 0x7c, 0x2d, 0xbb, 0x48, 0xde, 0xa5, 0x05, 0xb9, 0x94,
	0x46, 0xb0, 0x94, 0x76, 0xd1, 0x45, 0x4f, 0x0b, 0x97, 0x69, 0x21, 0x3d, 0x02, 0xb4, 0x0a, 0xbb,
	0xc9, 0xa4, 0x2d, 0x7c, 0xe7, 0x9a, 0xf9, 0x0e, 0x2a, 0x52, 0x4e, 0xf7, 0xb1, 0x55, 0x0f, 0x15,
	0x79, 0x4f, 0xf7, 0x61, 0x27, 0x09, 0x1b, 0x5b, 0x41, 0xbb, 0xd3, 0x6a, 0x93, 0x75, 0x5a, 0x83,
	0x83, 0x64, 0xca, 0x28, 0x09, 0xaf, 0x19, 0xb4, 0x18, 0x77, 0x84, 0x87, 0xa4, 0x42, 0x3f, 0xc2,
	0xd1, 0xd2, 0x70, 0x5e, 0x17, 0x95, 0x46, 0x15, 0x48, 0x0f, 0xdb, 0x0e, 0xf3, 0x91, 0x6c, 0xa4,
	0x8f, 0x6a, 0x41, 0xd1, 0x8e, 0xc2, 0x39, 0x89, 0xd0, 0x2d, 0xd8, 0x58, 0x9a, 0xd5, 0x69, 0x93,
	0xcd, 0x74, 0xf7, 0x8b, 0x8e, 0x70, 0x6d, 0xd3, 0x5e, 0x5e, 0x5e, 0x0a, 0x8e, 0x84, 0xa6, 0xa5,
	0x17, 0x04, 0x2e, 0xcd, 0x92, 0xb9, 0x60, 0x2e, 0xd9, 0x4a, 0xef, 0x7f, 0x41, 0xba, 0x64, 0x5c,
	0x4b, 0xd5, 0x23, 0xdb, 0xf4, 0x47, 0xa8, 0xaf, 0x64, 0xf8, 0xc2, 0x6b, 0xba, 0x18, 0x38, 0xb2,
	0x85, 0x64, 0x87, 0x7e, 0x80, 0xea, 0x4a, 0x96, 0x23, 0x35, 0xba, 0x64, 0xf7, 0x4d, 0x33, 0xac,
	0xcd, 0x94, 0x6e, 0xa1, 0xa7, 0x7d, 0xb2, 0xf7, 0xa6, 0x99, 0x36, 0x53, 0x57, 0xc2, 0x6b, 0x12,
	0xeb, 0x4d, 0x33, 0x0a, 0x7d, 0x61, 0x9b, 0xa3, 0x66, 0x2e, 0xd9, 0x4f, 0x9f, 0x99, 0x92, 0xb2,
	0x65, 0x6e, 0xaf, 0x43, 0xaa, 0xe9, 0xeb, 0x11, 0xa5, 0x9a, 0x4c, 0xb1, 0x26, 0x92, 0x03, 0x7a,
	0x04, 0xfb, 0x2b, 0xea, 0x7c, 0x34, 0xfe, 0xc8, 0x61, 0xfa, 0xf6, 0x44, 0x69, 0xee, 0x08, 0xd7,
	0x26, 0x47, 0xf4, 0x10, 0xac, 0x57, 0xb9, 0x2b, 0xa1, 0xb9, 0x83, 0x1e, 0xf9, 0xb0, 0xb2, 0xd2,
	0x67, 0x1d, 0x8f, 0x91, 0x1a, 0xb5, 0x60, 0xfb, 0x75, 0x53, 0xb4, 0x49, 0x7d, 0xa5, 0x57, 0x57,
	0x74, 0xcd, 0x26, 0x3e, 0xae, 0x6c, 0xd8, 0x44, 0x0f, 0x95, 0xe0, 0xe4, 0x38, 0x7d, 0xf3, 0xb8,
	0xf4, 0xb4, 0x92, 0xae, 0xcb, 0x2e, 0x5c, 0x0c, 0x5c, 0xc9, 0x6c, 0x72, 0x72, 0xf6, 0x07, 0x14,
	0xe3, 0x7f, 0x0f, 0x4a, 0xa1, 0xe2, 0x6b, 0xa6, 0x3b, 0x7e, 0xe2, 0x09, 0x59, 0x87, 0xd2, 0x1c,
	0x93, 0x57, 0x24, 0x93, 0xa0, 0x5c, 0x33, 0xe5, 0x19, 0x07, 0x59, 0x4a, 0xe0, 0xfd, 0x1c, 0x43,
	0xa5, 0xa4, 0x22, 0xb9, 0x33, 0x0d, 0x85, 0xe8, 0x8d, 0xa6, 0x9b, 0xb0, 0xce, 0x5d, 0xe6, 0x27,
	0x05, 0x29, 0x54, 0x62, 0x88, 0x4b, 0xcf, 0xef, 0xb4, 0x50, 0xc5, 0xaa, 0x31, 0xd6, 0x56, 0xd2,
	0xee, 0x70, 0x54, 0xb1, 0x6a, 0x8c, 0x39, 0xbd, 0x0b, 0x25, 0x6c, 0x92, 0xbb, 0x29, 0x46, 0xaf,
	0xe9, 0xcf, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x53, 0xa4, 0x17, 0x91, 0x5e, 0x08, 0x00, 0x00,
}
