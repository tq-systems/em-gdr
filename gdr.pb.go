// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v4.25.3
// source: gdr.proto

package gdr

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// FlexValueType declares which field should be used parsing the flexvalue
type FlexValueType int32

const (
	FlexValueType_FLEX_VALUE_TYPE_INTEGER FlexValueType = 0
	FlexValueType_FLEX_VALUE_TYPE_STRING  FlexValueType = 1
)

// Enum value maps for FlexValueType.
var (
	FlexValueType_name = map[int32]string{
		0: "FLEX_VALUE_TYPE_INTEGER",
		1: "FLEX_VALUE_TYPE_STRING",
	}
	FlexValueType_value = map[string]int32{
		"FLEX_VALUE_TYPE_INTEGER": 0,
		"FLEX_VALUE_TYPE_STRING":  1,
	}
)

func (x FlexValueType) Enum() *FlexValueType {
	p := new(FlexValueType)
	*p = x
	return p
}

func (x FlexValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlexValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_gdr_proto_enumTypes[0].Descriptor()
}

func (FlexValueType) Type() protoreflect.EnumType {
	return &file_gdr_proto_enumTypes[0]
}

func (x FlexValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlexValueType.Descriptor instead.
func (FlexValueType) EnumDescriptor() ([]byte, []int) {
	return file_gdr_proto_rawDescGZIP(), []int{0}
}

// Unit declares the unit of the flexible value
type Unit int32

const (
	Unit_UNIT_UNKNOWN Unit = 0
	// Electrical values
	Unit_UNIT_AMPERE               Unit = 1
	Unit_UNIT_VOLT                 Unit = 2
	Unit_UNIT_WATT                 Unit = 3
	Unit_UNIT_HERTZ                Unit = 4
	Unit_UNIT_VOLT_AMPERE          Unit = 5
	Unit_UNIT_VOLT_AMPERE_REACTIVE Unit = 6
	Unit_UNIT_WATT_HOUR            Unit = 7
	Unit_UNIT_KILO_WATT_HOUR       Unit = 8
	// Time Values
	Unit_UNIT_SECOND Unit = 9
	Unit_UNIT_MINUTE Unit = 10
	Unit_UNIT_HOUR   Unit = 11
	Unit_UNIT_DAY    Unit = 12
	Unit_UNIT_WEEK   Unit = 13
	Unit_UNIT_MONTH  Unit = 14
	Unit_UNIT_YEAR   Unit = 15
	// Other values
	Unit_UNIT_DEGREE_CELSIUS    Unit = 16
	Unit_UNIT_KELVIN            Unit = 17
	Unit_UNIT_DEGREE_FAHRENHEIT Unit = 18
)

// Enum value maps for Unit.
var (
	Unit_name = map[int32]string{
		0:  "UNIT_UNKNOWN",
		1:  "UNIT_AMPERE",
		2:  "UNIT_VOLT",
		3:  "UNIT_WATT",
		4:  "UNIT_HERTZ",
		5:  "UNIT_VOLT_AMPERE",
		6:  "UNIT_VOLT_AMPERE_REACTIVE",
		7:  "UNIT_WATT_HOUR",
		8:  "UNIT_KILO_WATT_HOUR",
		9:  "UNIT_SECOND",
		10: "UNIT_MINUTE",
		11: "UNIT_HOUR",
		12: "UNIT_DAY",
		13: "UNIT_WEEK",
		14: "UNIT_MONTH",
		15: "UNIT_YEAR",
		16: "UNIT_DEGREE_CELSIUS",
		17: "UNIT_KELVIN",
		18: "UNIT_DEGREE_FAHRENHEIT",
	}
	Unit_value = map[string]int32{
		"UNIT_UNKNOWN":              0,
		"UNIT_AMPERE":               1,
		"UNIT_VOLT":                 2,
		"UNIT_WATT":                 3,
		"UNIT_HERTZ":                4,
		"UNIT_VOLT_AMPERE":          5,
		"UNIT_VOLT_AMPERE_REACTIVE": 6,
		"UNIT_WATT_HOUR":            7,
		"UNIT_KILO_WATT_HOUR":       8,
		"UNIT_SECOND":               9,
		"UNIT_MINUTE":               10,
		"UNIT_HOUR":                 11,
		"UNIT_DAY":                  12,
		"UNIT_WEEK":                 13,
		"UNIT_MONTH":                14,
		"UNIT_YEAR":                 15,
		"UNIT_DEGREE_CELSIUS":       16,
		"UNIT_KELVIN":               17,
		"UNIT_DEGREE_FAHRENHEIT":    18,
	}
)

func (x Unit) Enum() *Unit {
	p := new(Unit)
	*p = x
	return p
}

func (x Unit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Unit) Descriptor() protoreflect.EnumDescriptor {
	return file_gdr_proto_enumTypes[1].Descriptor()
}

func (Unit) Type() protoreflect.EnumType {
	return &file_gdr_proto_enumTypes[1]
}

func (x Unit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Unit.Descriptor instead.
func (Unit) EnumDescriptor() ([]byte, []int) {
	return file_gdr_proto_rawDescGZIP(), []int{1}
}

// Devicetype - declares which Type of Device the Data Source is
//   - necessary for Sankey-Diagram
type DeviceType int32

const (
	DeviceType_DEVICE_TYPE_UNKNOWN               DeviceType = 0
	DeviceType_DEVICE_TYPE_PHOTOVOLTAIC_SYSTEM   DeviceType = 1 // Use this type for PV inverter
	DeviceType_DEVICE_TYPE_ELECTRIC_VEHICLE      DeviceType = 2
	DeviceType_DEVICE_TYPE_BATTERY               DeviceType = 3 // Use this type for battery inverter
	DeviceType_DEVICE_TYPE_OVEN                  DeviceType = 4
	DeviceType_DEVICE_TYPE_FLOW_HEATER           DeviceType = 5
	DeviceType_DEVICE_TYPE_BOILER                DeviceType = 6
	DeviceType_DEVICE_TYPE_IMMERSION_HEATER      DeviceType = 7
	DeviceType_DEVICE_TYPE_STOVE                 DeviceType = 8
	DeviceType_DEVICE_TYPE_COOLER                DeviceType = 9
	DeviceType_DEVICE_TYPE_VENTILATION           DeviceType = 10
	DeviceType_DEVICE_TYPE_DISHWASHER            DeviceType = 11
	DeviceType_DEVICE_TYPE_DRYER                 DeviceType = 12
	DeviceType_DEVICE_TYPE_HEAT_PUMP             DeviceType = 13
	DeviceType_DEVICE_TYPE_WASHING_MACHINE       DeviceType = 14
	DeviceType_DEVICE_TYPE_INVERTER_ONEPHASE     DeviceType = 15
	DeviceType_DEVICE_TYPE_INVERTER_THREEPHASE   DeviceType = 16
	DeviceType_DEVICE_TYPE_CHP                   DeviceType = 17 // Combined heat and power
	DeviceType_DEVICE_TYPE_BUILDING_OFFICE       DeviceType = 18
	DeviceType_DEVICE_TYPE_BUILDING_COMMERCIAL   DeviceType = 19
	DeviceType_DEVICE_TYPE_BUILDING_FACTORY      DeviceType = 20
	DeviceType_DEVICE_TYPE_BUILDING_SINGLE_HOME  DeviceType = 21
	DeviceType_DEVICE_TYPE_BUILDING_HOTEL        DeviceType = 22
	DeviceType_DEVICE_TYPE_BUILDING_APARTMENTS   DeviceType = 23
	DeviceType_DEVICE_TYPE_BUILDING_PARKING      DeviceType = 24
	DeviceType_DEVICE_TYPE_BUILDING_RESIDENTIAL  DeviceType = 25
	DeviceType_DEVICE_TYPE_ROOM_BATH             DeviceType = 26
	DeviceType_DEVICE_TYPE_ROOM_GARAGE           DeviceType = 27
	DeviceType_DEVICE_TYPE_ROOM_BASEMENT         DeviceType = 28
	DeviceType_DEVICE_TYPE_ROOM_CHILD            DeviceType = 29
	DeviceType_DEVICE_TYPE_ROOM_KITCHEN          DeviceType = 30
	DeviceType_DEVICE_TYPE_ROOM_SAUNA            DeviceType = 31
	DeviceType_DEVICE_TYPE_ROOM_BED              DeviceType = 32
	DeviceType_DEVICE_TYPE_ROOM_LIVING           DeviceType = 33
	DeviceType_DEVICE_TYPE_ROOM_GENERIC          DeviceType = 34
	DeviceType_DEVICE_TYPE_CONTROLLABLE_LOAD     DeviceType = 35
	DeviceType_DEVICE_TYPE_LIGHTING              DeviceType = 36
	DeviceType_DEVICE_TYPE_OFFICES               DeviceType = 37
	DeviceType_DEVICE_TYPE_DOMESTIC_APPLIANCES   DeviceType = 38
	DeviceType_DEVICE_TYPE_HEATER_OF_HEAT_PUMP   DeviceType = 39
	DeviceType_DEVICE_TYPE_INDUSTRIAL_ENGINE     DeviceType = 40
	DeviceType_DEVICE_TYPE_AIR_CONDITIONING      DeviceType = 41
	DeviceType_DEVICE_TYPE_COMPRESSOR            DeviceType = 42
	DeviceType_DEVICE_TYPE_PC_DATA_CENTER        DeviceType = 43
	DeviceType_DEVICE_TYPE_FUSES_THREE           DeviceType = 44
	DeviceType_DEVICE_TYPE_FUSES_SIX             DeviceType = 45
	DeviceType_DEVICE_TYPE_FUSES_NINE            DeviceType = 46
	DeviceType_DEVICE_TYPE_FUSES_TWELVE          DeviceType = 47
	DeviceType_DEVICE_TYPE_COMPACTOR             DeviceType = 48
	DeviceType_DEVICE_TYPE_WHITE_GOODS           DeviceType = 49
	DeviceType_DEVICE_TYPE_COLD_STORAGE_ROOM     DeviceType = 50
	DeviceType_DEVICE_TYPE_GARDEN_SHED           DeviceType = 51
	DeviceType_DEVICE_TYPE_COOLING_COMBINATION   DeviceType = 52
	DeviceType_DEVICE_TYPE_FACILITIES            DeviceType = 53
	DeviceType_DEVICE_TYPE_FREEZER               DeviceType = 54
	DeviceType_DEVICE_TYPE_FRIDGE                DeviceType = 55
	DeviceType_DEVICE_TYPE_GRID_CONNECTION_POINT DeviceType = 56
	DeviceType_DEVICE_TYPE_INVERTER_HYBRID       DeviceType = 57
	DeviceType_DEVICE_TYPE_CIRCUIT_PROTECTION    DeviceType = 58
	DeviceType_DEVICE_TYPE_DATA_TRANSCEIVER      DeviceType = 59 //To be continued
)

// Enum value maps for DeviceType.
var (
	DeviceType_name = map[int32]string{
		0:  "DEVICE_TYPE_UNKNOWN",
		1:  "DEVICE_TYPE_PHOTOVOLTAIC_SYSTEM",
		2:  "DEVICE_TYPE_ELECTRIC_VEHICLE",
		3:  "DEVICE_TYPE_BATTERY",
		4:  "DEVICE_TYPE_OVEN",
		5:  "DEVICE_TYPE_FLOW_HEATER",
		6:  "DEVICE_TYPE_BOILER",
		7:  "DEVICE_TYPE_IMMERSION_HEATER",
		8:  "DEVICE_TYPE_STOVE",
		9:  "DEVICE_TYPE_COOLER",
		10: "DEVICE_TYPE_VENTILATION",
		11: "DEVICE_TYPE_DISHWASHER",
		12: "DEVICE_TYPE_DRYER",
		13: "DEVICE_TYPE_HEAT_PUMP",
		14: "DEVICE_TYPE_WASHING_MACHINE",
		15: "DEVICE_TYPE_INVERTER_ONEPHASE",
		16: "DEVICE_TYPE_INVERTER_THREEPHASE",
		17: "DEVICE_TYPE_CHP",
		18: "DEVICE_TYPE_BUILDING_OFFICE",
		19: "DEVICE_TYPE_BUILDING_COMMERCIAL",
		20: "DEVICE_TYPE_BUILDING_FACTORY",
		21: "DEVICE_TYPE_BUILDING_SINGLE_HOME",
		22: "DEVICE_TYPE_BUILDING_HOTEL",
		23: "DEVICE_TYPE_BUILDING_APARTMENTS",
		24: "DEVICE_TYPE_BUILDING_PARKING",
		25: "DEVICE_TYPE_BUILDING_RESIDENTIAL",
		26: "DEVICE_TYPE_ROOM_BATH",
		27: "DEVICE_TYPE_ROOM_GARAGE",
		28: "DEVICE_TYPE_ROOM_BASEMENT",
		29: "DEVICE_TYPE_ROOM_CHILD",
		30: "DEVICE_TYPE_ROOM_KITCHEN",
		31: "DEVICE_TYPE_ROOM_SAUNA",
		32: "DEVICE_TYPE_ROOM_BED",
		33: "DEVICE_TYPE_ROOM_LIVING",
		34: "DEVICE_TYPE_ROOM_GENERIC",
		35: "DEVICE_TYPE_CONTROLLABLE_LOAD",
		36: "DEVICE_TYPE_LIGHTING",
		37: "DEVICE_TYPE_OFFICES",
		38: "DEVICE_TYPE_DOMESTIC_APPLIANCES",
		39: "DEVICE_TYPE_HEATER_OF_HEAT_PUMP",
		40: "DEVICE_TYPE_INDUSTRIAL_ENGINE",
		41: "DEVICE_TYPE_AIR_CONDITIONING",
		42: "DEVICE_TYPE_COMPRESSOR",
		43: "DEVICE_TYPE_PC_DATA_CENTER",
		44: "DEVICE_TYPE_FUSES_THREE",
		45: "DEVICE_TYPE_FUSES_SIX",
		46: "DEVICE_TYPE_FUSES_NINE",
		47: "DEVICE_TYPE_FUSES_TWELVE",
		48: "DEVICE_TYPE_COMPACTOR",
		49: "DEVICE_TYPE_WHITE_GOODS",
		50: "DEVICE_TYPE_COLD_STORAGE_ROOM",
		51: "DEVICE_TYPE_GARDEN_SHED",
		52: "DEVICE_TYPE_COOLING_COMBINATION",
		53: "DEVICE_TYPE_FACILITIES",
		54: "DEVICE_TYPE_FREEZER",
		55: "DEVICE_TYPE_FRIDGE",
		56: "DEVICE_TYPE_GRID_CONNECTION_POINT",
		57: "DEVICE_TYPE_INVERTER_HYBRID",
		58: "DEVICE_TYPE_CIRCUIT_PROTECTION",
		59: "DEVICE_TYPE_DATA_TRANSCEIVER",
	}
	DeviceType_value = map[string]int32{
		"DEVICE_TYPE_UNKNOWN":               0,
		"DEVICE_TYPE_PHOTOVOLTAIC_SYSTEM":   1,
		"DEVICE_TYPE_ELECTRIC_VEHICLE":      2,
		"DEVICE_TYPE_BATTERY":               3,
		"DEVICE_TYPE_OVEN":                  4,
		"DEVICE_TYPE_FLOW_HEATER":           5,
		"DEVICE_TYPE_BOILER":                6,
		"DEVICE_TYPE_IMMERSION_HEATER":      7,
		"DEVICE_TYPE_STOVE":                 8,
		"DEVICE_TYPE_COOLER":                9,
		"DEVICE_TYPE_VENTILATION":           10,
		"DEVICE_TYPE_DISHWASHER":            11,
		"DEVICE_TYPE_DRYER":                 12,
		"DEVICE_TYPE_HEAT_PUMP":             13,
		"DEVICE_TYPE_WASHING_MACHINE":       14,
		"DEVICE_TYPE_INVERTER_ONEPHASE":     15,
		"DEVICE_TYPE_INVERTER_THREEPHASE":   16,
		"DEVICE_TYPE_CHP":                   17,
		"DEVICE_TYPE_BUILDING_OFFICE":       18,
		"DEVICE_TYPE_BUILDING_COMMERCIAL":   19,
		"DEVICE_TYPE_BUILDING_FACTORY":      20,
		"DEVICE_TYPE_BUILDING_SINGLE_HOME":  21,
		"DEVICE_TYPE_BUILDING_HOTEL":        22,
		"DEVICE_TYPE_BUILDING_APARTMENTS":   23,
		"DEVICE_TYPE_BUILDING_PARKING":      24,
		"DEVICE_TYPE_BUILDING_RESIDENTIAL":  25,
		"DEVICE_TYPE_ROOM_BATH":             26,
		"DEVICE_TYPE_ROOM_GARAGE":           27,
		"DEVICE_TYPE_ROOM_BASEMENT":         28,
		"DEVICE_TYPE_ROOM_CHILD":            29,
		"DEVICE_TYPE_ROOM_KITCHEN":          30,
		"DEVICE_TYPE_ROOM_SAUNA":            31,
		"DEVICE_TYPE_ROOM_BED":              32,
		"DEVICE_TYPE_ROOM_LIVING":           33,
		"DEVICE_TYPE_ROOM_GENERIC":          34,
		"DEVICE_TYPE_CONTROLLABLE_LOAD":     35,
		"DEVICE_TYPE_LIGHTING":              36,
		"DEVICE_TYPE_OFFICES":               37,
		"DEVICE_TYPE_DOMESTIC_APPLIANCES":   38,
		"DEVICE_TYPE_HEATER_OF_HEAT_PUMP":   39,
		"DEVICE_TYPE_INDUSTRIAL_ENGINE":     40,
		"DEVICE_TYPE_AIR_CONDITIONING":      41,
		"DEVICE_TYPE_COMPRESSOR":            42,
		"DEVICE_TYPE_PC_DATA_CENTER":        43,
		"DEVICE_TYPE_FUSES_THREE":           44,
		"DEVICE_TYPE_FUSES_SIX":             45,
		"DEVICE_TYPE_FUSES_NINE":            46,
		"DEVICE_TYPE_FUSES_TWELVE":          47,
		"DEVICE_TYPE_COMPACTOR":             48,
		"DEVICE_TYPE_WHITE_GOODS":           49,
		"DEVICE_TYPE_COLD_STORAGE_ROOM":     50,
		"DEVICE_TYPE_GARDEN_SHED":           51,
		"DEVICE_TYPE_COOLING_COMBINATION":   52,
		"DEVICE_TYPE_FACILITIES":            53,
		"DEVICE_TYPE_FREEZER":               54,
		"DEVICE_TYPE_FRIDGE":                55,
		"DEVICE_TYPE_GRID_CONNECTION_POINT": 56,
		"DEVICE_TYPE_INVERTER_HYBRID":       57,
		"DEVICE_TYPE_CIRCUIT_PROTECTION":    58,
		"DEVICE_TYPE_DATA_TRANSCEIVER":      59,
	}
)

func (x DeviceType) Enum() *DeviceType {
	p := new(DeviceType)
	*p = x
	return p
}

func (x DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_gdr_proto_enumTypes[2].Descriptor()
}

func (DeviceType) Type() protoreflect.EnumType {
	return &file_gdr_proto_enumTypes[2]
}

func (x DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceType.Descriptor instead.
func (DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_gdr_proto_rawDescGZIP(), []int{2}
}

// Status OK = Datasource updated Data, GDR Updated
// Status WARNING = Datasource updated Data but configuration is needed
// Status Error = Datasource did not updated Data (Maybe broken)
type Status int32

const (
	Status_STATUS_UNKNOWN Status = 0
	Status_STATUS_OK      Status = 1
	Status_STATUS_WARNING Status = 2
	Status_STATUS_ERROR   Status = 3
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_WARNING",
		3: "STATUS_ERROR",
	}
	Status_value = map[string]int32{
		"STATUS_UNKNOWN": 0,
		"STATUS_OK":      1,
		"STATUS_WARNING": 2,
		"STATUS_ERROR":   3,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_gdr_proto_enumTypes[3].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_gdr_proto_enumTypes[3]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_gdr_proto_rawDescGZIP(), []int{3}
}

// Class Consumer = Consumes Energy, Power, ...
// Class Producer = Produces Energy, Power, ...
// Class Hybrid = Consumes or Produces Energy, Power, ...
type Class int32

const (
	Class_CLASS_UNKNOWN  Class = 0
	Class_CLASS_CONSUMER Class = 1
	Class_CLASS_PRODUCER Class = 2
	Class_CLASS_HYBRID   Class = 3
)

// Enum value maps for Class.
var (
	Class_name = map[int32]string{
		0: "CLASS_UNKNOWN",
		1: "CLASS_CONSUMER",
		2: "CLASS_PRODUCER",
		3: "CLASS_HYBRID",
	}
	Class_value = map[string]int32{
		"CLASS_UNKNOWN":  0,
		"CLASS_CONSUMER": 1,
		"CLASS_PRODUCER": 2,
		"CLASS_HYBRID":   3,
	}
)

func (x Class) Enum() *Class {
	p := new(Class)
	*p = x
	return p
}

func (x Class) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Class) Descriptor() protoreflect.EnumDescriptor {
	return file_gdr_proto_enumTypes[4].Descriptor()
}

func (Class) Type() protoreflect.EnumType {
	return &file_gdr_proto_enumTypes[4]
}

func (x Class) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Class.Descriptor instead.
func (Class) EnumDescriptor() ([]byte, []int) {
	return file_gdr_proto_rawDescGZIP(), []int{4}
}

// GDRs is the message type wich is published to the mqtt Handler for GDR
// config_uuid - unique identification of config at time of measurement (same as associated GCR)
type GDRs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GDRs          map[string]*GDR        `protobuf:"bytes,1,rep,name=GDRs,proto3" json:"GDRs" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ConfigUuid    string                 `protobuf:"bytes,2,opt,name=config_uuid,json=configUuid,proto3" json:"config_uuid"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GDRs) Reset() {
	*x = GDRs{}
	mi := &file_gdr_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GDRs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GDRs) ProtoMessage() {}

func (x *GDRs) ProtoReflect() protoreflect.Message {
	mi := &file_gdr_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GDRs.ProtoReflect.Descriptor instead.
func (*GDRs) Descriptor() ([]byte, []int) {
	return file_gdr_proto_rawDescGZIP(), []int{0}
}

func (x *GDRs) GetGDRs() map[string]*GDR {
	if x != nil {
		return x.GDRs
	}
	return nil
}

func (x *GDRs) GetConfigUuid() string {
	if x != nil {
		return x.ConfigUuid
	}
	return ""
}

// GCRs is the message type wich is published to the mqtt Handler for GCR
// config_uuid - unique identification of config in time (i.e. changes on config change)
type GCRs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GCRs          map[string]*GCR        `protobuf:"bytes,1,rep,name=GCRs,proto3" json:"GCRs" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ConfigUuid    string                 `protobuf:"bytes,2,opt,name=config_uuid,json=configUuid,proto3" json:"config_uuid"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GCRs) Reset() {
	*x = GCRs{}
	mi := &file_gdr_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GCRs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCRs) ProtoMessage() {}

func (x *GCRs) ProtoReflect() protoreflect.Message {
	mi := &file_gdr_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCRs.ProtoReflect.Descriptor instead.
func (*GCRs) Descriptor() ([]byte, []int) {
	return file_gdr_proto_rawDescGZIP(), []int{1}
}

func (x *GCRs) GetGCRs() map[string]*GCR {
	if x != nil {
		return x.GCRs
	}
	return nil
}

func (x *GCRs) GetConfigUuid() string {
	if x != nil {
		return x.ConfigUuid
	}
	return ""
}

// GDR = Generic Data Record
// id - unique identification (Same to associated GCR)
// status - see Status declaration
// timestamp - last time Data was updated
// values - Key = Binary ObisCode, Value = Value of ObisCode
//   - based on ObisCode the basic Data information
//   - in groups here is the comparison of the childs data information
//
// flexValues - Key = string
//
//	Value = FlexValue
type GDR struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Status        Status                 `protobuf:"varint,2,opt,name=status,proto3,enum=Status" json:"status"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp"`
	Values        map[uint64]uint64      `protobuf:"bytes,4,rep,name=values,proto3" json:"values" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	FlexValues    map[string]*FlexValue  `protobuf:"bytes,5,rep,name=flexValues,proto3" json:"flexValues" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GDR) Reset() {
	*x = GDR{}
	mi := &file_gdr_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GDR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GDR) ProtoMessage() {}

func (x *GDR) ProtoReflect() protoreflect.Message {
	mi := &file_gdr_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GDR.ProtoReflect.Descriptor instead.
func (*GDR) Descriptor() ([]byte, []int) {
	return file_gdr_proto_rawDescGZIP(), []int{2}
}

func (x *GDR) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GDR) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_UNKNOWN
}

func (x *GDR) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *GDR) GetValues() map[uint64]uint64 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *GDR) GetFlexValues() map[string]*FlexValue {
	if x != nil {
		return x.FlexValues
	}
	return nil
}

// GCR = Generic Config Record
// id - unique identification (Same to associated GDR)
// label - describes the Datasource
// class - see Class declaration
// sources - points to the childs of the measuring point
//   - references on the GDR ids
//   - structure of groupings
//
// codes  - based on Binary ObisCodes
//   - declares which ObisCodes the associated GDR has
//
// devicetype - see DeviceType declaration
// meta - may include app-dependent meta information
// timestamp - last time the config was updated
// flexDefinitions - definition of flexible values
type GCR struct {
	state           protoimpl.MessageState     `protogen:"open.v1"`
	Id              string                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	Label           string                     `protobuf:"bytes,2,opt,name=label,proto3" json:"label"`
	Class           Class                      `protobuf:"varint,3,opt,name=class,proto3,enum=Class" json:"class"`
	Sources         []string                   `protobuf:"bytes,4,rep,name=sources,proto3" json:"sources"`
	Codes           []uint64                   `protobuf:"varint,5,rep,packed,name=codes,proto3" json:"codes"`
	Devicetype      DeviceType                 `protobuf:"varint,6,opt,name=devicetype,proto3,enum=DeviceType" json:"devicetype"`
	Meta            map[string]string          `protobuf:"bytes,7,rep,name=meta,proto3" json:"meta" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Timestamp       *timestamppb.Timestamp     `protobuf:"bytes,8,opt,name=timestamp,proto3" json:"timestamp"`
	FlexDefinitions map[string]*FlexDefinition `protobuf:"bytes,9,rep,name=flexDefinitions,proto3" json:"flexDefinitions" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *GCR) Reset() {
	*x = GCR{}
	mi := &file_gdr_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GCR) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCR) ProtoMessage() {}

func (x *GCR) ProtoReflect() protoreflect.Message {
	mi := &file_gdr_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCR.ProtoReflect.Descriptor instead.
func (*GCR) Descriptor() ([]byte, []int) {
	return file_gdr_proto_rawDescGZIP(), []int{3}
}

func (x *GCR) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GCR) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *GCR) GetClass() Class {
	if x != nil {
		return x.Class
	}
	return Class_CLASS_UNKNOWN
}

func (x *GCR) GetSources() []string {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *GCR) GetCodes() []uint64 {
	if x != nil {
		return x.Codes
	}
	return nil
}

func (x *GCR) GetDevicetype() DeviceType {
	if x != nil {
		return x.Devicetype
	}
	return DeviceType_DEVICE_TYPE_UNKNOWN
}

func (x *GCR) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *GCR) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *GCR) GetFlexDefinitions() map[string]*FlexDefinition {
	if x != nil {
		return x.FlexDefinitions
	}
	return nil
}

// FlexValue is a message type which handles flexible datapoints inside a GDR
type FlexValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IntValue      int64                  `protobuf:"varint,1,opt,name=int_value,json=intValue,proto3" json:"int_value"`
	StringValue   string                 `protobuf:"bytes,2,opt,name=string_value,json=stringValue,proto3" json:"string_value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlexValue) Reset() {
	*x = FlexValue{}
	mi := &file_gdr_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlexValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlexValue) ProtoMessage() {}

func (x *FlexValue) ProtoReflect() protoreflect.Message {
	mi := &file_gdr_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlexValue.ProtoReflect.Descriptor instead.
func (*FlexValue) Descriptor() ([]byte, []int) {
	return file_gdr_proto_rawDescGZIP(), []int{4}
}

func (x *FlexValue) GetIntValue() int64 {
	if x != nil {
		return x.IntValue
	}
	return 0
}

func (x *FlexValue) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

// FlexDefinition describes the content of the flexible values
type FlexDefinition struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Label         string                 `protobuf:"bytes,1,opt,name=label,proto3" json:"label"`
	Type          FlexValueType          `protobuf:"varint,2,opt,name=type,proto3,enum=FlexValueType" json:"type"`
	Unit          Unit                   `protobuf:"varint,3,opt,name=unit,proto3,enum=Unit" json:"unit"`
	Decimalpower  int32                  `protobuf:"zigzag32,4,opt,name=decimalpower,proto3" json:"decimalpower"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlexDefinition) Reset() {
	*x = FlexDefinition{}
	mi := &file_gdr_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlexDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlexDefinition) ProtoMessage() {}

func (x *FlexDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_gdr_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlexDefinition.ProtoReflect.Descriptor instead.
func (*FlexDefinition) Descriptor() ([]byte, []int) {
	return file_gdr_proto_rawDescGZIP(), []int{5}
}

func (x *FlexDefinition) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *FlexDefinition) GetType() FlexValueType {
	if x != nil {
		return x.Type
	}
	return FlexValueType_FLEX_VALUE_TYPE_INTEGER
}

func (x *FlexDefinition) GetUnit() Unit {
	if x != nil {
		return x.Unit
	}
	return Unit_UNIT_UNKNOWN
}

func (x *FlexDefinition) GetDecimalpower() int32 {
	if x != nil {
		return x.Decimalpower
	}
	return 0
}

var File_gdr_proto protoreflect.FileDescriptor

var file_gdr_proto_rawDesc = string([]byte{
	0x0a, 0x09, 0x67, 0x64, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x01, 0x0a,
	0x04, 0x47, 0x44, 0x52, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x47, 0x44, 0x52, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x47, 0x44, 0x52, 0x73, 0x2e, 0x47, 0x44, 0x52, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x47, 0x44, 0x52, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x75, 0x69, 0x64, 0x1a, 0x3d, 0x0a, 0x09, 0x47,
	0x44, 0x52, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x47, 0x44, 0x52, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8b, 0x01, 0x0a, 0x04, 0x47,
	0x43, 0x52, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x47, 0x43, 0x52, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x47, 0x43, 0x52, 0x73, 0x2e, 0x47, 0x43, 0x52, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x47, 0x43, 0x52, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x55, 0x75, 0x69, 0x64, 0x1a, 0x3d, 0x0a, 0x09, 0x47, 0x43, 0x52,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x47, 0x43, 0x52, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd6, 0x02, 0x0a, 0x03, 0x47, 0x44, 0x52,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x07, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x28, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x47, 0x44,
	0x52, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x66, 0x6c, 0x65, 0x78, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x47, 0x44, 0x52, 0x2e,
	0x46, 0x6c, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x66, 0x6c, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x49, 0x0a, 0x0f, 0x46, 0x6c, 0x65, 0x78, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x46, 0x6c, 0x65,
	0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xd7, 0x03, 0x0a, 0x03, 0x47, 0x43, 0x52, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x1c, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x06,
	0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2b, 0x0a,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0b, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x47, 0x43, 0x52, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x38,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x43, 0x0a, 0x0f, 0x66, 0x6c, 0x65, 0x78,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x47, 0x43, 0x52, 0x2e, 0x46, 0x6c, 0x65, 0x78, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x66, 0x6c,
	0x65, 0x78, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x37, 0x0a,
	0x09, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x53, 0x0a, 0x14, 0x46, 0x6c, 0x65, 0x78, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x46, 0x6c, 0x65, 0x78, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4b, 0x0a, 0x09, 0x46,
	0x6c, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x0e, 0x46, 0x6c, 0x65,
	0x78, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x22, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x46, 0x6c, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x2a, 0x48, 0x0a, 0x0d, 0x46, 0x6c, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x4c, 0x45, 0x58, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x4c, 0x45, 0x58, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x2a, 0xec,
	0x02, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x41, 0x4d, 0x50, 0x45, 0x52, 0x45, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e,
	0x49, 0x54, 0x5f, 0x56, 0x4f, 0x4c, 0x54, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x57, 0x41, 0x54, 0x54, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x48, 0x45, 0x52, 0x54, 0x5a, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x56, 0x4f, 0x4c, 0x54, 0x5f, 0x41, 0x4d, 0x50, 0x45, 0x52, 0x45, 0x10, 0x05, 0x12, 0x1d,
	0x0a, 0x19, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x56, 0x4f, 0x4c, 0x54, 0x5f, 0x41, 0x4d, 0x50, 0x45,
	0x52, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x06, 0x12, 0x12, 0x0a,
	0x0e, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x57, 0x41, 0x54, 0x54, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10,
	0x07, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4b, 0x49, 0x4c, 0x4f, 0x5f, 0x57,
	0x41, 0x54, 0x54, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e,
	0x49, 0x54, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09,
	0x55, 0x4e, 0x49, 0x54, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x55,
	0x4e, 0x49, 0x54, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x0e, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x49, 0x54,
	0x5f, 0x59, 0x45, 0x41, 0x52, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e, 0x49, 0x54, 0x5f,
	0x44, 0x45, 0x47, 0x52, 0x45, 0x45, 0x5f, 0x43, 0x45, 0x4c, 0x53, 0x49, 0x55, 0x53, 0x10, 0x10,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x4b, 0x45, 0x4c, 0x56, 0x49, 0x4e, 0x10,
	0x11, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e, 0x49, 0x54, 0x5f, 0x44, 0x45, 0x47, 0x52, 0x45, 0x45,
	0x5f, 0x46, 0x41, 0x48, 0x52, 0x45, 0x4e, 0x48, 0x45, 0x49, 0x54, 0x10, 0x12, 0x2a, 0xb2, 0x0e,
	0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x48, 0x4f, 0x54, 0x4f, 0x56, 0x4f, 0x4c, 0x54, 0x41, 0x49,
	0x43, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x52,
	0x49, 0x43, 0x5f, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x54,
	0x45, 0x52, 0x59, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x4e, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f,
	0x48, 0x45, 0x41, 0x54, 0x45, 0x52, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x49, 0x4c, 0x45, 0x52, 0x10, 0x06,
	0x12, 0x20, 0x0a, 0x1c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4d, 0x4d, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x45, 0x41, 0x54, 0x45, 0x52,
	0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x53, 0x54, 0x4f, 0x56, 0x45, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x45, 0x52, 0x10,
	0x09, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x56, 0x45, 0x4e, 0x54, 0x49, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x1a,
	0x0a, 0x16, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49,
	0x53, 0x48, 0x57, 0x41, 0x53, 0x48, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x59, 0x45, 0x52, 0x10,
	0x0c, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x48, 0x45, 0x41, 0x54, 0x5f, 0x50, 0x55, 0x4d, 0x50, 0x10, 0x0d, 0x12, 0x1f, 0x0a, 0x1b,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x53, 0x48,
	0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x43, 0x48, 0x49, 0x4e, 0x45, 0x10, 0x0e, 0x12, 0x21, 0x0a,
	0x1d, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56,
	0x45, 0x52, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x45, 0x50, 0x48, 0x41, 0x53, 0x45, 0x10, 0x0f,
	0x12, 0x23, 0x0a, 0x1f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x52, 0x45, 0x45, 0x50, 0x48,
	0x41, 0x53, 0x45, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x50, 0x10, 0x11, 0x12, 0x1f, 0x0a, 0x1b, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x4f, 0x46, 0x46, 0x49, 0x43, 0x45, 0x10, 0x12, 0x12, 0x23, 0x0a, 0x1f, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x52, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x13,
	0x12, 0x20, 0x0a, 0x1c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x59,
	0x10, 0x14, 0x12, 0x24, 0x0a, 0x20, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c,
	0x45, 0x5f, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x15, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x48, 0x4f, 0x54, 0x45, 0x4c, 0x10, 0x16, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x41, 0x50, 0x41, 0x52, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x17, 0x12, 0x20, 0x0a,
	0x1c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x49,
	0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x41, 0x52, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x18, 0x12,
	0x24, 0x0a, 0x20, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42,
	0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x49, 0x44, 0x45, 0x4e, 0x54,
	0x49, 0x41, 0x4c, 0x10, 0x19, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x42, 0x41, 0x54, 0x48, 0x10, 0x1a,
	0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x47, 0x41, 0x52, 0x41, 0x47, 0x45, 0x10, 0x1b, 0x12, 0x1d, 0x0a,
	0x19, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4f,
	0x4d, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x1c, 0x12, 0x1a, 0x0a, 0x16,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d,
	0x5f, 0x43, 0x48, 0x49, 0x4c, 0x44, 0x10, 0x1d, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4b, 0x49, 0x54,
	0x43, 0x48, 0x45, 0x4e, 0x10, 0x1e, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53, 0x41, 0x55, 0x4e, 0x41,
	0x10, 0x1f, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x42, 0x45, 0x44, 0x10, 0x20, 0x12, 0x1b, 0x0a, 0x17,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d,
	0x5f, 0x4c, 0x49, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x21, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x47, 0x45,
	0x4e, 0x45, 0x52, 0x49, 0x43, 0x10, 0x22, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x23, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x24, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x49, 0x43, 0x45, 0x53, 0x10, 0x25, 0x12, 0x23, 0x0a,
	0x1f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x4d,
	0x45, 0x53, 0x54, 0x49, 0x43, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x43, 0x45, 0x53,
	0x10, 0x26, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x48, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x46, 0x5f, 0x48, 0x45, 0x41, 0x54,
	0x5f, 0x50, 0x55, 0x4d, 0x50, 0x10, 0x27, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x55, 0x53, 0x54, 0x52, 0x49, 0x41,
	0x4c, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x10, 0x28, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x49, 0x52, 0x5f, 0x43, 0x4f,
	0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x29, 0x12, 0x1a, 0x0a, 0x16,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x52, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x10, 0x2a, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x43, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x2b, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x53, 0x45, 0x53, 0x5f, 0x54, 0x48,
	0x52, 0x45, 0x45, 0x10, 0x2c, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x53, 0x45, 0x53, 0x5f, 0x53, 0x49, 0x58, 0x10, 0x2d,
	0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x46, 0x55, 0x53, 0x45, 0x53, 0x5f, 0x4e, 0x49, 0x4e, 0x45, 0x10, 0x2e, 0x12, 0x1c, 0x0a, 0x18,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x53, 0x45,
	0x53, 0x5f, 0x54, 0x57, 0x45, 0x4c, 0x56, 0x45, 0x10, 0x2f, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x43,
	0x54, 0x4f, 0x52, 0x10, 0x30, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x48, 0x49, 0x54, 0x45, 0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x53,
	0x10, 0x31, 0x12, 0x21, 0x0a, 0x1d, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x52,
	0x4f, 0x4f, 0x4d, 0x10, 0x32, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x41, 0x52, 0x44, 0x45, 0x4e, 0x5f, 0x53, 0x48, 0x45, 0x44,
	0x10, 0x33, 0x12, 0x23, 0x0a, 0x1f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x43, 0x4f, 0x4f, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x42, 0x49, 0x4e,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x34, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x43, 0x49, 0x4c, 0x49, 0x54, 0x49, 0x45,
	0x53, 0x10, 0x35, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5a, 0x45, 0x52, 0x10, 0x36, 0x12, 0x16, 0x0a, 0x12,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x52, 0x49, 0x44,
	0x47, 0x45, 0x10, 0x37, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x47, 0x52, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x38, 0x12, 0x1f, 0x0a, 0x1b, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x45, 0x52,
	0x54, 0x45, 0x52, 0x5f, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44, 0x10, 0x39, 0x12, 0x22, 0x0a, 0x1e,
	0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x49, 0x52, 0x43,
	0x55, 0x49, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x3a,
	0x12, 0x20, 0x0a, 0x1c, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x43, 0x45, 0x49, 0x56, 0x45, 0x52,
	0x10, 0x3b, 0x2a, 0x51, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x03, 0x2a, 0x54, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x11,
	0x0a, 0x0d, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x55,
	0x4d, 0x45, 0x52, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x50,
	0x52, 0x4f, 0x44, 0x55, 0x43, 0x45, 0x52, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4c, 0x41,
	0x53, 0x53, 0x5f, 0x48, 0x59, 0x42, 0x52, 0x49, 0x44, 0x10, 0x03, 0x42, 0x08, 0x5a, 0x06, 0x2e,
	0x2f, 0x3b, 0x67, 0x64, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_gdr_proto_rawDescOnce sync.Once
	file_gdr_proto_rawDescData []byte
)

func file_gdr_proto_rawDescGZIP() []byte {
	file_gdr_proto_rawDescOnce.Do(func() {
		file_gdr_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_gdr_proto_rawDesc), len(file_gdr_proto_rawDesc)))
	})
	return file_gdr_proto_rawDescData
}

var file_gdr_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_gdr_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_gdr_proto_goTypes = []any{
	(FlexValueType)(0),            // 0: FlexValueType
	(Unit)(0),                     // 1: Unit
	(DeviceType)(0),               // 2: DeviceType
	(Status)(0),                   // 3: Status
	(Class)(0),                    // 4: Class
	(*GDRs)(nil),                  // 5: GDRs
	(*GCRs)(nil),                  // 6: GCRs
	(*GDR)(nil),                   // 7: GDR
	(*GCR)(nil),                   // 8: GCR
	(*FlexValue)(nil),             // 9: FlexValue
	(*FlexDefinition)(nil),        // 10: FlexDefinition
	nil,                           // 11: GDRs.GDRsEntry
	nil,                           // 12: GCRs.GCRsEntry
	nil,                           // 13: GDR.ValuesEntry
	nil,                           // 14: GDR.FlexValuesEntry
	nil,                           // 15: GCR.MetaEntry
	nil,                           // 16: GCR.FlexDefinitionsEntry
	(*timestamppb.Timestamp)(nil), // 17: google.protobuf.Timestamp
}
var file_gdr_proto_depIdxs = []int32{
	11, // 0: GDRs.GDRs:type_name -> GDRs.GDRsEntry
	12, // 1: GCRs.GCRs:type_name -> GCRs.GCRsEntry
	3,  // 2: GDR.status:type_name -> Status
	17, // 3: GDR.timestamp:type_name -> google.protobuf.Timestamp
	13, // 4: GDR.values:type_name -> GDR.ValuesEntry
	14, // 5: GDR.flexValues:type_name -> GDR.FlexValuesEntry
	4,  // 6: GCR.class:type_name -> Class
	2,  // 7: GCR.devicetype:type_name -> DeviceType
	15, // 8: GCR.meta:type_name -> GCR.MetaEntry
	17, // 9: GCR.timestamp:type_name -> google.protobuf.Timestamp
	16, // 10: GCR.flexDefinitions:type_name -> GCR.FlexDefinitionsEntry
	0,  // 11: FlexDefinition.type:type_name -> FlexValueType
	1,  // 12: FlexDefinition.unit:type_name -> Unit
	7,  // 13: GDRs.GDRsEntry.value:type_name -> GDR
	8,  // 14: GCRs.GCRsEntry.value:type_name -> GCR
	9,  // 15: GDR.FlexValuesEntry.value:type_name -> FlexValue
	10, // 16: GCR.FlexDefinitionsEntry.value:type_name -> FlexDefinition
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_gdr_proto_init() }
func file_gdr_proto_init() {
	if File_gdr_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gdr_proto_rawDesc), len(file_gdr_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gdr_proto_goTypes,
		DependencyIndexes: file_gdr_proto_depIdxs,
		EnumInfos:         file_gdr_proto_enumTypes,
		MessageInfos:      file_gdr_proto_msgTypes,
	}.Build()
	File_gdr_proto = out.File
	file_gdr_proto_goTypes = nil
	file_gdr_proto_depIdxs = nil
}
